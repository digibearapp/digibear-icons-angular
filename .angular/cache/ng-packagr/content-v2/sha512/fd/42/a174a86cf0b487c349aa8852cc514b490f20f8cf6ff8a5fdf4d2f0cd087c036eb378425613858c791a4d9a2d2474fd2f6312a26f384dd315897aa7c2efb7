{"hash":"ef63d1ae564c45d84a55e3c6c1ef77ae21ee5876","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { DigibearIconsRegistry } from '@digibearapp/digibear-svg-core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgDbIconContext {\n    constructor() {\n        this.iconContext = {};\n    }\n    setIconContext(iconContext) {\n        this.iconContext = {\n            iconStyle: iconContext.iconStyle ?? this.iconStyle,\n            color: iconContext.color ?? this.color,\n            secondaryColor: iconContext.secondaryColor ?? this.secondaryColor,\n            opacity: iconContext.opacity ?? this.opacity,\n            secondaryOpacity: iconContext.secondaryOpacity ?? this.secondaryOpacity,\n            size: iconContext.size ?? this.size,\n            flippedH: iconContext.flippedH ?? this.flippedH,\n            flippedV: iconContext.flippedV ?? this.flippedV,\n        };\n    }\n    get iconStyle() { return this.iconContext.iconStyle ?? \"line\"; }\n    ;\n    get color() { return this.iconContext.color ?? \"currentColor\"; }\n    ;\n    get secondaryColor() { return this.iconContext.secondaryColor ?? \"currentColor\"; }\n    ;\n    get opacity() { return this.iconContext.opacity ?? 1.0; }\n    ;\n    get secondaryOpacity() { return this.iconContext.secondaryOpacity ?? 0.16; }\n    ;\n    get size() { return this.iconContext.size ?? 128.0; }\n    ;\n    get flippedH() { return this.iconContext.flippedH ?? false; }\n    ;\n    get flippedV() { return this.iconContext.flippedV ?? false; }\n    ;\n}\nNgDbIconContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgDbIconContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass NgDigibearIconsRegistry {\n    constructor() {\n        this.registry = new DigibearIconsRegistry();\n    }\n    registerIcons(icons) {\n        this.registry.registerIcons(icons);\n    }\n    getIcon(dbIconProps) {\n        return this.registry.getIcon(dbIconProps);\n    }\n}\nNgDigibearIconsRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgDigibearIconsRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass DbIcon {\n    constructor(registry, iconContext) {\n        this.registry = registry;\n        this.iconContext = iconContext;\n    }\n    ngOnChanges(changes) {\n        this.svg = this.initSvg();\n    }\n    ngOnInit() { }\n    initSvg() {\n        if (this.iconName === undefined || this.iconName === null) {\n            throw new Error(\"Attribute 'iconName' is required\");\n        }\n        const dbIconProps = {\n            iconName: this.iconName,\n            iconStyle: this.iconStyle ?? this.iconContext.iconStyle,\n            color: this.color ?? this.iconContext.color,\n            secondaryColor: this.secondaryColor ?? this.iconContext.secondaryColor,\n            opacity: this.opacity ?? this.iconContext.opacity,\n            secondaryOpacity: this.secondaryOpacity ?? this.iconContext.secondaryOpacity,\n            size: this.size ?? this.iconContext.size,\n            flippedH: this.flippedH ?? this.iconContext.flippedH,\n            flippedV: this.flippedV ?? this.iconContext.flippedV\n        };\n        return this.registry.getIcon(dbIconProps);\n    }\n}\nDbIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIcon, deps: [{ token: NgDigibearIconsRegistry }, { token: NgDbIconContext }], target: i0.ɵɵFactoryTarget.Component });\nDbIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DbIcon, selector: \"db-icon\", inputs: { iconName: \"iconName\", iconStyle: \"iconStyle\", color: \"color\", secondaryColor: \"secondaryColor\", opacity: \"opacity\", secondaryOpacity: \"secondaryOpacity\", size: \"size\", flippedH: \"flippedH\", flippedV: \"flippedV\" }, usesOnChanges: true, ngImport: i0, template: \"<svg *ngIf=\\\"svg\\\" [attr.viewBox]=\\\"svg.viewBox\\\" [attr.width]=\\\"svg.width\\\" [attr.height]=\\\"svg.height\\\" [attr.fill]=\\\"svg.fill\\\">\\n    <ng-content />\\n    <g [attr.transform]=\\\"svg.groupTransform\\\">\\n        <path *ngFor=\\\"let path of svg.paths\\\" [attr.d]=\\\"path.d\\\" [attr.fill]=\\\"path.fill\\\" [attr.opacity]=\\\"path.opacity\\\" />\\n    </g>\\n</svg>\\n\", directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIcon, decorators: [{\n            type: Component,\n            args: [{ selector: 'db-icon', styles: [], template: \"<svg *ngIf=\\\"svg\\\" [attr.viewBox]=\\\"svg.viewBox\\\" [attr.width]=\\\"svg.width\\\" [attr.height]=\\\"svg.height\\\" [attr.fill]=\\\"svg.fill\\\">\\n    <ng-content />\\n    <g [attr.transform]=\\\"svg.groupTransform\\\">\\n        <path *ngFor=\\\"let path of svg.paths\\\" [attr.d]=\\\"path.d\\\" [attr.fill]=\\\"path.fill\\\" [attr.opacity]=\\\"path.opacity\\\" />\\n    </g>\\n</svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: NgDigibearIconsRegistry }, { type: NgDbIconContext }]; }, propDecorators: { iconName: [{\n                type: Input\n            }], iconStyle: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], secondaryColor: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], secondaryOpacity: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], flippedH: [{\n                type: Input\n            }], flippedV: [{\n                type: Input\n            }] } });\n\nclass DbIconModule {\n}\nDbIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDbIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, declarations: [DbIcon], imports: [CommonModule], exports: [DbIcon] });\nDbIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        DbIcon\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        DbIcon\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of db-icon\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DbIcon, DbIconModule, NgDbIconContext, NgDigibearIconsRegistry };\n//# sourceMappingURL=digibearapp-digibear-icons-angular.mjs.map\n","map":{"version":3,"file":"digibearapp-digibear-icons-angular.mjs","sources":["../../../projects/db-icon/src/lib/db-icon-context.service.ts","../../../projects/db-icon/src/lib/digibear-icons-registry.service.ts","../../../projects/db-icon/src/lib/db-icon.component.ts","../../../projects/db-icon/src/lib/db-icon.component.html","../../../projects/db-icon/src/lib/db-icon.module.ts","../../../projects/db-icon/src/public-api.ts","../../../projects/db-icon/src/digibearapp-digibear-icons-angular.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DbIconContextProps, DbIconStyle, Size } from '@digibearapp/digibear-common-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDbIconContext {\n  private iconContext: DbIconContextProps;\n\n  constructor() {\n    this.iconContext = {};\n  }\n\n  setIconContext(iconContext: DbIconContextProps): void {\n    this.iconContext = {\n      iconStyle: iconContext.iconStyle ?? this.iconStyle,\n      color: iconContext.color ?? this.color,\n      secondaryColor: iconContext.secondaryColor ?? this.secondaryColor,\n      opacity: iconContext.opacity ?? this.opacity,\n      secondaryOpacity: iconContext.secondaryOpacity ?? this.secondaryOpacity,\n      size: iconContext.size ?? this.size,\n      flippedH: iconContext.flippedH ?? this.flippedH,\n      flippedV: iconContext.flippedV ?? this.flippedV,\n    }\n  }\n\n  get iconStyle(): DbIconStyle { return this.iconContext.iconStyle ?? \"line\"};\n  get color(): string { return this.iconContext.color ?? \"currentColor\" };\n  get secondaryColor(): string { return this.iconContext.secondaryColor ?? \"currentColor\" };\n  get opacity(): number { return this.iconContext.opacity ?? 1.0 };\n  get secondaryOpacity(): number { return this.iconContext.secondaryOpacity ?? 0.16 };\n  get size(): Size { return this.iconContext.size ?? 128.0 };\n  get flippedH(): boolean { return this.iconContext.flippedH ?? false };\n  get flippedV(): boolean { return this.iconContext.flippedV ?? false };\n}","import { Injectable } from '@angular/core';\nimport { DbIconDefinition, DbIconProps } from '@digibearapp/digibear-common-types';\nimport { DigibearIconsRegistry } from '@digibearapp/digibear-svg-core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDigibearIconsRegistry {\n  private registry = new DigibearIconsRegistry();\n  \n  public registerIcons(icons: DbIconDefinition[]) {\n    this.registry.registerIcons(icons);\n  }\n\n  public getIcon(dbIconProps: DbIconProps) {\n    return this.registry.getIcon(dbIconProps);\n  }\n\n  constructor() {}\n}\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DbIconName, DbIconProps, DbIconStyle, DbSvgDefinition, Size } from '@digibearapp/digibear-common-types';\nimport { NgDbIconContext } from './db-icon-context.service';\nimport { NgDigibearIconsRegistry } from './digibear-icons-registry.service';\n\n@Component({\n  selector: 'db-icon',\n  templateUrl: './db-icon.component.html',\n  styles: [\n  ]\n})\nexport class DbIcon implements OnInit, OnChanges {\n  @Input() iconName!: DbIconName;\n  @Input() iconStyle?: DbIconStyle;\n  @Input() color?: string;\n  @Input() secondaryColor?: string;\n  @Input() opacity?: number;\n  @Input() secondaryOpacity?: number;\n  @Input() size?: Size;\n  @Input() flippedH?: boolean;\n  @Input() flippedV?: boolean;\n  svg?: DbSvgDefinition;\n\n  constructor(\n    private registry: NgDigibearIconsRegistry,\n    private iconContext: NgDbIconContext\n  ) { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.svg = this.initSvg();\n  }\n\n  ngOnInit(): void { }\n\n  initSvg() {\n    if (this.iconName === undefined || this.iconName === null) {\n      throw new Error(\"Attribute 'iconName' is required\");\n    }\n    const dbIconProps: DbIconProps = {\n      iconName: this.iconName,\n      iconStyle: this.iconStyle ?? this.iconContext.iconStyle,\n      color: this.color ?? this.iconContext.color,\n      secondaryColor: this.secondaryColor ?? this.iconContext.secondaryColor,\n      opacity: this.opacity ?? this.iconContext.opacity,\n      secondaryOpacity: this.secondaryOpacity ?? this.iconContext.secondaryOpacity,\n      size: this.size ?? this.iconContext.size,\n      flippedH: this.flippedH ?? this.iconContext.flippedH,\n      flippedV: this.flippedV ?? this.iconContext.flippedV\n    };\n\n    return this.registry.getIcon(dbIconProps)!;\n  }\n\n}","<svg *ngIf=\"svg\" [attr.viewBox]=\"svg.viewBox\" [attr.width]=\"svg.width\" [attr.height]=\"svg.height\" [attr.fill]=\"svg.fill\">\n    <ng-content />\n    <g [attr.transform]=\"svg.groupTransform\">\n        <path *ngFor=\"let path of svg.paths\" [attr.d]=\"path.d\" [attr.fill]=\"path.fill\" [attr.opacity]=\"path.opacity\" />\n    </g>\n</svg>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DbIcon } from './db-icon.component';\n\n\n@NgModule({\n  declarations: [\n    DbIcon\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    DbIcon\n  ]\n})\nexport class DbIconModule {}\n","/*\n * Public API Surface of db-icon\n */\n\nexport * from './lib/db-icon-context.service';\nexport * from './lib/digibear-icons-registry.service';\nexport * from './lib/db-icon.component';\nexport * from './lib/db-icon.module';\nexport { DbIconStyle, DbIconName, DbIconContextProps, DbIconProps } from '@digibearapp/digibear-common-types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { DigibearIconsRegistry } from '@digibearapp/digibear-svg-core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgDbIconContext {\n    constructor() {\n        this.iconContext = {};\n    }\n    setIconContext(iconContext) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.iconContext = {\n            iconStyle: (_a = iconContext.iconStyle) !== null && _a !== void 0 ? _a : this.iconStyle,\n            color: (_b = iconContext.color) !== null && _b !== void 0 ? _b : this.color,\n            secondaryColor: (_c = iconContext.secondaryColor) !== null && _c !== void 0 ? _c : this.secondaryColor,\n            opacity: (_d = iconContext.opacity) !== null && _d !== void 0 ? _d : this.opacity,\n            secondaryOpacity: (_e = iconContext.secondaryOpacity) !== null && _e !== void 0 ? _e : this.secondaryOpacity,\n            size: (_f = iconContext.size) !== null && _f !== void 0 ? _f : this.size,\n            flippedH: (_g = iconContext.flippedH) !== null && _g !== void 0 ? _g : this.flippedH,\n            flippedV: (_h = iconContext.flippedV) !== null && _h !== void 0 ? _h : this.flippedV,\n        };\n    }\n    get iconStyle() { var _a; return (_a = this.iconContext.iconStyle) !== null && _a !== void 0 ? _a : \"line\"; }\n    ;\n    get color() { var _a; return (_a = this.iconContext.color) !== null && _a !== void 0 ? _a : \"currentColor\"; }\n    ;\n    get secondaryColor() { var _a; return (_a = this.iconContext.secondaryColor) !== null && _a !== void 0 ? _a : \"currentColor\"; }\n    ;\n    get opacity() { var _a; return (_a = this.iconContext.opacity) !== null && _a !== void 0 ? _a : 1.0; }\n    ;\n    get secondaryOpacity() { var _a; return (_a = this.iconContext.secondaryOpacity) !== null && _a !== void 0 ? _a : 0.16; }\n    ;\n    get size() { var _a; return (_a = this.iconContext.size) !== null && _a !== void 0 ? _a : 128.0; }\n    ;\n    get flippedH() { var _a; return (_a = this.iconContext.flippedH) !== null && _a !== void 0 ? _a : false; }\n    ;\n    get flippedV() { var _a; return (_a = this.iconContext.flippedV) !== null && _a !== void 0 ? _a : false; }\n    ;\n}\nNgDbIconContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgDbIconContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDbIconContext, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass NgDigibearIconsRegistry {\n    constructor() {\n        this.registry = new DigibearIconsRegistry();\n    }\n    registerIcons(icons) {\n        this.registry.registerIcons(icons);\n    }\n    getIcon(dbIconProps) {\n        return this.registry.getIcon(dbIconProps);\n    }\n}\nNgDigibearIconsRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgDigibearIconsRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgDigibearIconsRegistry, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass DbIcon {\n    constructor(registry, iconContext) {\n        this.registry = registry;\n        this.iconContext = iconContext;\n    }\n    ngOnChanges(changes) {\n        this.svg = this.initSvg();\n    }\n    ngOnInit() { }\n    initSvg() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (this.iconName === undefined || this.iconName === null) {\n            throw new Error(\"Attribute 'iconName' is required\");\n        }\n        const dbIconProps = {\n            iconName: this.iconName,\n            iconStyle: (_a = this.iconStyle) !== null && _a !== void 0 ? _a : this.iconContext.iconStyle,\n            color: (_b = this.color) !== null && _b !== void 0 ? _b : this.iconContext.color,\n            secondaryColor: (_c = this.secondaryColor) !== null && _c !== void 0 ? _c : this.iconContext.secondaryColor,\n            opacity: (_d = this.opacity) !== null && _d !== void 0 ? _d : this.iconContext.opacity,\n            secondaryOpacity: (_e = this.secondaryOpacity) !== null && _e !== void 0 ? _e : this.iconContext.secondaryOpacity,\n            size: (_f = this.size) !== null && _f !== void 0 ? _f : this.iconContext.size,\n            flippedH: (_g = this.flippedH) !== null && _g !== void 0 ? _g : this.iconContext.flippedH,\n            flippedV: (_h = this.flippedV) !== null && _h !== void 0 ? _h : this.iconContext.flippedV\n        };\n        return this.registry.getIcon(dbIconProps);\n    }\n}\nDbIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIcon, deps: [{ token: NgDigibearIconsRegistry }, { token: NgDbIconContext }], target: i0.ɵɵFactoryTarget.Component });\nDbIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DbIcon, selector: \"db-icon\", inputs: { iconName: \"iconName\", iconStyle: \"iconStyle\", color: \"color\", secondaryColor: \"secondaryColor\", opacity: \"opacity\", secondaryOpacity: \"secondaryOpacity\", size: \"size\", flippedH: \"flippedH\", flippedV: \"flippedV\" }, usesOnChanges: true, ngImport: i0, template: \"<svg *ngIf=\\\"svg\\\" [attr.viewBox]=\\\"svg.viewBox\\\" [attr.width]=\\\"svg.width\\\" [attr.height]=\\\"svg.height\\\" [attr.fill]=\\\"svg.fill\\\">\\n    <ng-content />\\n    <g [attr.transform]=\\\"svg.groupTransform\\\">\\n        <path *ngFor=\\\"let path of svg.paths\\\" [attr.d]=\\\"path.d\\\" [attr.fill]=\\\"path.fill\\\" [attr.opacity]=\\\"path.opacity\\\" />\\n    </g>\\n</svg>\\n\", directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIcon, decorators: [{\n            type: Component,\n            args: [{ selector: 'db-icon', styles: [], template: \"<svg *ngIf=\\\"svg\\\" [attr.viewBox]=\\\"svg.viewBox\\\" [attr.width]=\\\"svg.width\\\" [attr.height]=\\\"svg.height\\\" [attr.fill]=\\\"svg.fill\\\">\\n    <ng-content />\\n    <g [attr.transform]=\\\"svg.groupTransform\\\">\\n        <path *ngFor=\\\"let path of svg.paths\\\" [attr.d]=\\\"path.d\\\" [attr.fill]=\\\"path.fill\\\" [attr.opacity]=\\\"path.opacity\\\" />\\n    </g>\\n</svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: NgDigibearIconsRegistry }, { type: NgDbIconContext }]; }, propDecorators: { iconName: [{\n                type: Input\n            }], iconStyle: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], secondaryColor: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], secondaryOpacity: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], flippedH: [{\n                type: Input\n            }], flippedV: [{\n                type: Input\n            }] } });\n\nclass DbIconModule {\n}\nDbIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDbIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, declarations: [DbIcon], imports: [CommonModule], exports: [DbIcon] });\nDbIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DbIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        DbIcon\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        DbIcon\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of db-icon\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DbIcon, DbIconModule, NgDbIconContext, NgDigibearIconsRegistry };\n//# sourceMappingURL=digibearapp-digibear-icons-angular.mjs.map\n","map":{"version":3,"file":"digibearapp-digibear-icons-angular.mjs","sources":["../../../projects/db-icon/src/lib/db-icon-context.service.ts","../../../projects/db-icon/src/lib/digibear-icons-registry.service.ts","../../../projects/db-icon/src/lib/db-icon.component.ts","../../../projects/db-icon/src/lib/db-icon.component.html","../../../projects/db-icon/src/lib/db-icon.module.ts","../../../projects/db-icon/src/public-api.ts","../../../projects/db-icon/src/digibearapp-digibear-icons-angular.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DbIconContextProps, DbIconStyle, Size } from '@digibearapp/digibear-common-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDbIconContext {\n  private iconContext: DbIconContextProps;\n\n  constructor() {\n    this.iconContext = {};\n  }\n\n  setIconContext(iconContext: DbIconContextProps): void {\n    this.iconContext = {\n      iconStyle: iconContext.iconStyle ?? this.iconStyle,\n      color: iconContext.color ?? this.color,\n      secondaryColor: iconContext.secondaryColor ?? this.secondaryColor,\n      opacity: iconContext.opacity ?? this.opacity,\n      secondaryOpacity: iconContext.secondaryOpacity ?? this.secondaryOpacity,\n      size: iconContext.size ?? this.size,\n      flippedH: iconContext.flippedH ?? this.flippedH,\n      flippedV: iconContext.flippedV ?? this.flippedV,\n    }\n  }\n\n  get iconStyle(): DbIconStyle { return this.iconContext.iconStyle ?? \"line\"};\n  get color(): string { return this.iconContext.color ?? \"currentColor\" };\n  get secondaryColor(): string { return this.iconContext.secondaryColor ?? \"currentColor\" };\n  get opacity(): number { return this.iconContext.opacity ?? 1.0 };\n  get secondaryOpacity(): number { return this.iconContext.secondaryOpacity ?? 0.16 };\n  get size(): Size { return this.iconContext.size ?? 128.0 };\n  get flippedH(): boolean { return this.iconContext.flippedH ?? false };\n  get flippedV(): boolean { return this.iconContext.flippedV ?? false };\n}","import { Injectable } from '@angular/core';\nimport { DbIconDefinition, DbIconProps } from '@digibearapp/digibear-common-types';\nimport { DigibearIconsRegistry } from '@digibearapp/digibear-svg-core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDigibearIconsRegistry {\n  private registry = new DigibearIconsRegistry();\n  \n  public registerIcons(icons: DbIconDefinition[]) {\n    this.registry.registerIcons(icons);\n  }\n\n  public getIcon(dbIconProps: DbIconProps) {\n    return this.registry.getIcon(dbIconProps);\n  }\n\n  constructor() {}\n}\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DbIconName, DbIconProps, DbIconStyle, DbSvgDefinition, Size } from '@digibearapp/digibear-common-types';\nimport { NgDbIconContext } from './db-icon-context.service';\nimport { NgDigibearIconsRegistry } from './digibear-icons-registry.service';\n\n@Component({\n  selector: 'db-icon',\n  templateUrl: './db-icon.component.html',\n  styles: [\n  ]\n})\nexport class DbIcon implements OnInit, OnChanges {\n  @Input() iconName!: DbIconName;\n  @Input() iconStyle?: DbIconStyle;\n  @Input() color?: string;\n  @Input() secondaryColor?: string;\n  @Input() opacity?: number;\n  @Input() secondaryOpacity?: number;\n  @Input() size?: Size;\n  @Input() flippedH?: boolean;\n  @Input() flippedV?: boolean;\n  svg?: DbSvgDefinition;\n\n  constructor(\n    private registry: NgDigibearIconsRegistry,\n    private iconContext: NgDbIconContext\n  ) { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.svg = this.initSvg();\n  }\n\n  ngOnInit(): void { }\n\n  initSvg() {\n    if (this.iconName === undefined || this.iconName === null) {\n      throw new Error(\"Attribute 'iconName' is required\");\n    }\n    const dbIconProps: DbIconProps = {\n      iconName: this.iconName,\n      iconStyle: this.iconStyle ?? this.iconContext.iconStyle,\n      color: this.color ?? this.iconContext.color,\n      secondaryColor: this.secondaryColor ?? this.iconContext.secondaryColor,\n      opacity: this.opacity ?? this.iconContext.opacity,\n      secondaryOpacity: this.secondaryOpacity ?? this.iconContext.secondaryOpacity,\n      size: this.size ?? this.iconContext.size,\n      flippedH: this.flippedH ?? this.iconContext.flippedH,\n      flippedV: this.flippedV ?? this.iconContext.flippedV\n    };\n\n    return this.registry.getIcon(dbIconProps)!;\n  }\n\n}","<svg *ngIf=\"svg\" [attr.viewBox]=\"svg.viewBox\" [attr.width]=\"svg.width\" [attr.height]=\"svg.height\" [attr.fill]=\"svg.fill\">\n    <ng-content />\n    <g [attr.transform]=\"svg.groupTransform\">\n        <path *ngFor=\"let path of svg.paths\" [attr.d]=\"path.d\" [attr.fill]=\"path.fill\" [attr.opacity]=\"path.opacity\" />\n    </g>\n</svg>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DbIcon } from './db-icon.component';\n\n\n@NgModule({\n  declarations: [\n    DbIcon\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    DbIcon\n  ]\n})\nexport class DbIconModule {}\n","/*\n * Public API Surface of db-icon\n */\n\nexport * from './lib/db-icon-context.service';\nexport * from './lib/digibear-icons-registry.service';\nexport * from './lib/db-icon.component';\nexport * from './lib/db-icon.module';\nexport { DbIconStyle, DbIconName, DbIconContextProps, DbIconProps } from '@digibearapp/digibear-common-types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;MAMa,eAAe;IAG1B;QACE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;KACvB;IAED,cAAc,CAAC,WAA+B;;QAC5C,IAAI,CAAC,WAAW,GAAG;YACjB,SAAS,EAAE,MAAA,WAAW,CAAC,SAAS,mCAAI,IAAI,CAAC,SAAS;YAClD,KAAK,EAAE,MAAA,WAAW,CAAC,KAAK,mCAAI,IAAI,CAAC,KAAK;YACtC,cAAc,EAAE,MAAA,WAAW,CAAC,cAAc,mCAAI,IAAI,CAAC,cAAc;YACjE,OAAO,EAAE,MAAA,WAAW,CAAC,OAAO,mCAAI,IAAI,CAAC,OAAO;YAC5C,gBAAgB,EAAE,MAAA,WAAW,CAAC,gBAAgB,mCAAI,IAAI,CAAC,gBAAgB;YACvE,IAAI,EAAE,MAAA,WAAW,CAAC,IAAI,mCAAI,IAAI,CAAC,IAAI;YACnC,QAAQ,EAAE,MAAA,WAAW,CAAC,QAAQ,mCAAI,IAAI,CAAC,QAAQ;YAC/C,QAAQ,EAAE,MAAA,WAAW,CAAC,QAAQ,mCAAI,IAAI,CAAC,QAAQ;SAChD,CAAA;KACF;IAED,IAAI,SAAS,aAAkB,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,SAAS,mCAAI,MAAM,CAAA,EAAC;;IAC3E,IAAI,KAAK,aAAa,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,KAAK,mCAAI,cAAc,CAAA,EAAE;;IACvE,IAAI,cAAc,aAAa,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,cAAc,mCAAI,cAAc,CAAA,EAAE;;IACzF,IAAI,OAAO,aAAa,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,OAAO,mCAAI,GAAG,CAAA,EAAE;;IAChE,IAAI,gBAAgB,aAAa,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,gBAAgB,mCAAI,IAAI,CAAA,EAAE;;IACnF,IAAI,IAAI,aAAW,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,IAAI,mCAAI,KAAK,CAAA,EAAE;;IAC1D,IAAI,QAAQ,aAAc,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,QAAQ,mCAAI,KAAK,CAAA,EAAE;;IACrE,IAAI,QAAQ,aAAc,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,QAAQ,mCAAI,KAAK,CAAA,EAAE;;;4GA3B1D,eAAe;gHAAf,eAAe,cAFd,MAAM;2FAEP,eAAe;kBAH3B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCEY,uBAAuB;IAWlC;QAVQ,aAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;KAU/B;IART,aAAa,CAAC,KAAyB;QAC5C,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KACpC;IAEM,OAAO,CAAC,WAAwB;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;KAC3C;;oHATU,uBAAuB;wHAAvB,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCKY,MAAM;IAYjB,YACU,QAAiC,EACjC,WAA4B;QAD5B,aAAQ,GAAR,QAAQ,CAAyB;QACjC,gBAAW,GAAX,WAAW,CAAiB;KACjC;IAEL,WAAW,CAAC,OAAsB;QAChC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;KAC3B;IAED,QAAQ,MAAY;IAEpB,OAAO;;QACL,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QACD,MAAM,WAAW,GAAgB;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,MAAA,IAAI,CAAC,SAAS,mCAAI,IAAI,CAAC,WAAW,CAAC,SAAS;YACvD,KAAK,EAAE,MAAA,IAAI,CAAC,KAAK,mCAAI,IAAI,CAAC,WAAW,CAAC,KAAK;YAC3C,cAAc,EAAE,MAAA,IAAI,CAAC,cAAc,mCAAI,IAAI,CAAC,WAAW,CAAC,cAAc;YACtE,OAAO,EAAE,MAAA,IAAI,CAAC,OAAO,mCAAI,IAAI,CAAC,WAAW,CAAC,OAAO;YACjD,gBAAgB,EAAE,MAAA,IAAI,CAAC,gBAAgB,mCAAI,IAAI,CAAC,WAAW,CAAC,gBAAgB;YAC5E,IAAI,EAAE,MAAA,IAAI,CAAC,IAAI,mCAAI,IAAI,CAAC,WAAW,CAAC,IAAI;YACxC,QAAQ,EAAE,MAAA,IAAI,CAAC,QAAQ,mCAAI,IAAI,CAAC,WAAW,CAAC,QAAQ;YACpD,QAAQ,EAAE,MAAA,IAAI,CAAC,QAAQ,mCAAI,IAAI,CAAC,WAAW,CAAC,QAAQ;SACrD,CAAC;QAEF,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC;KAC5C;;mGAxCU,MAAM;uFAAN,MAAM,oSCXnB,+VAMA;2FDKa,MAAM;kBANlB,SAAS;+BACE,SAAS,UAEX,EACP;sIAGQ,QAAQ;sBAAhB,KAAK;gBACG,SAAS;sBAAjB,KAAK;gBACG,KAAK;sBAAb,KAAK;gBACG,cAAc;sBAAtB,KAAK;gBACG,OAAO;sBAAf,KAAK;gBACG,gBAAgB;sBAAxB,KAAK;gBACG,IAAI;sBAAZ,KAAK;gBACG,QAAQ;sBAAhB,KAAK;gBACG,QAAQ;sBAAhB,KAAK;;;MEJK,YAAY;;yGAAZ,YAAY;0GAAZ,YAAY,iBATrB,MAAM,aAGN,YAAY,aAGZ,MAAM;0GAGG,YAAY,YAPd;YACP,YAAY;SACb;2FAKU,YAAY;kBAXxB,QAAQ;mBAAC;oBACR,YAAY,EAAE;wBACZ,MAAM;qBACP;oBACD,OAAO,EAAE;wBACP,YAAY;qBACb;oBACD,OAAO,EAAE;wBACP,MAAM;qBACP;iBACF;;;ACfD;;;;ACAA;;;;;;"}}}